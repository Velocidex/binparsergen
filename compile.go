package binparsergen

import "fmt"

func GenerateCode(
	spec *ConversionSpec,
	profile map[string]*StructDefinition) string {
	dependencies := ""
	if spec.GenerateDebugString {
		dependencies = "\"fmt\""
	}

	result := fmt.Sprintf(`
package %s

// Autogenerated code from %s. Do not edit.

import (
    "encoding/binary"
    %s
    "io"
)
`, spec.Module, spec.Filename, dependencies)
	profile_name := spec.Profile

	result += GenerateProfileCode(profile_name, profile)
	for struct_name, struct_def := range profile {
		struct_name := NormalizeName(struct_name)
		result += GenerateStructCode(struct_name, profile_name, struct_def)
		if spec.GenerateDebugString {
			result += GenerateDebugString(
				struct_name, profile_name, struct_def)
		}
	}

	result += GeneratePrototypes()

	return result
}
